{"version":3,"sources":["logo.svg","Components/TodoForm.js","Components/TodoItem.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","onSubmit","e","preventDefault","id","Math","floor","random","title","completed","className","classNameStyle","type","placeholder","value","name","onChange","target","btnName","TodoItem","editCheck","setEditCheck","edited","handleEdit","index","todo","onClick","handleComplete","handleDelete","TodoList","updatedTodos","todos","map","updateTodos","updatedDeletedTodos","splice","edit","editedObject","App","setTodos","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76aa8bd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react'\r\nimport '../App.css';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(\"\")\r\n\r\n    // const [todo, setTodo] = useState({})\r\n\r\n    const handleChange = e =>{\r\n        setInput(e.target.value)    \r\n    }\r\n \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        props.onSubmit({\r\n            id : Math.floor(Math.random()*10000),\r\n            title : input,\r\n            completed : false,\r\n        })\r\n        \r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit ={handleSubmit}  className = {props.classNameStyle}>\r\n                <input type = \"text\" \r\n                placeholder = {props.placeholder}\r\n                value = {input}\r\n                name = \"text\" \r\n                className = \"todo-input\"\r\n                onChange = {handleChange}\r\n                />\r\n                <button  className = \"todo-button\">{props.btnName}</button>\r\n            </form> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React, {useState} from 'react'\r\nimport '../App.css'\r\nimport { FiEdit } from 'react-icons/fi';\r\nimport { TiDelete } from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\n// FiEdit\r\n// TiDelete\r\nfunction TodoItem(props) {\r\n    // editCheck variable is to check if the edit button is clicked\r\n    const [editCheck, setEditCheck] = useState(false)\r\n\r\n    const handleComplete = () => {\r\n        props.handleComplete(props.todo.id)\r\n    }\r\n    const handleDelete = () => {\r\n        props.handleDelete(props.index)\r\n    }\r\n    const handleEditForm = () => {\r\n        // We set the edit check variable to true so as to run the edit todo-form within the return statement\r\n        setEditCheck(true)\r\n    }\r\n    const handleEdit =(edited)=>{\r\n        // pass the edited text input to the todolist function to update the TODOS array\r\n        // We must pass it with the particular todo index\r\n        \r\n        props.handleEdit(props.index, edited.title)\r\n\r\n        // we must reset our editCheck variable to false since id has completed its job\r\n        setEditCheck(false)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { editCheck === true ?\r\n                (<TodoForm \r\n                    classNameStyle = \"edit-todo\"\r\n                    onSubmit = {handleEdit}\r\n                    placeholder = \"Edit your Intent\"\r\n                    btnName = \"Edit Intent\"\r\n                />) : \r\n                \r\n                <li className = {props.todo.completed ? \"todo-completed\" : \"\"}>\r\n                    <p onClick = {handleComplete}> {props.todo.title} </p>\r\n                    <div>\r\n                        <span onClick = {handleEditForm} className = \"icon-btn\" ><FiEdit className = \"icon-edit\"/></span>\r\n                        <span onClick = {handleDelete} className = \"icon-btn\" ><TiDelete className = \"icon-del\"/></span>\r\n                    </div>\r\n                </li>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {} from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport '../App.css'\r\n\r\nfunction TodoList(props) {\r\n    const handleComplete = (id) =>{\r\n        const updatedTodos = props.todos.map((todo) => {\r\n            if (id === todo.id){\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo\r\n        })\r\n        // update the local todo\r\n        props.updateTodos(updatedTodos)\r\n    }\r\n    const handleDelete = (index) =>{\r\n        const updatedDeletedTodos = [...props.todos]\r\n        updatedDeletedTodos.splice(index,1)\r\n        // update the local todo\r\n        props.updateTodos(updatedDeletedTodos)\r\n    }\r\n    const handleEdit = (index,edit) =>{\r\n        const editedObject = {\r\n            id : props.todos[index].id,\r\n            title : edit,\r\n            completed : false,\r\n        }\r\n        props.todos[index] = editedObject\r\n\r\n        props.updateTodos([...props.todos])\r\n        \r\n    }\r\n    return (\r\n         \r\n        <ul className = \"todo-list\">              \r\n                {props.todos.map((todo, index) => (\r\n                        <TodoItem \r\n                        todo = {todo} \r\n                        key = {index} \r\n                        index = {index}\r\n                        handleComplete ={handleComplete}\r\n                        handleDelete = {handleDelete}\r\n                        handleEdit = {handleEdit}\r\n                        />\r\n                ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TodoList","import logo from './logo.svg';\nimport './App.css';\nimport TodoForm from './Components/TodoForm';\nimport TodoList from './Components/TodoList';\nimport React, {useState} from 'react'\nimport { FaListAlt } from 'react-icons/fa';\n\n\nfunction App() {\n  const [todos, setTodos] = useState( [{\n    id : Math.floor(Math.random()*10000),\n    title : 'Sample Completed Todo',\n    completed : true,\n  }] )\n  // const [error, setError] = useState(\"\")\n  \n  const formOnSubmit = (todo) => {\n    if(todo.title === \"\"){\n      alert(\"Input cannot be empty\")\n    }\n    else{\n      setTodos([todo, ...todos])\n      // setError(true) \n    }\n    \n  }\n\n  return (\n    <div className =\"App\">\n    <div className=\"todo-app\">\n      <div className = \"header\">\n     <h1>  <FaListAlt className = \"logo\"/> INTENDING</h1>\n        <p>(A Todo App)</p>\n      </div>\n        {/* <p className = {if (error == \"\" \"no-error-message\" : \"error-message\"}> {error} </p> */}\n        <TodoForm  \n          onSubmit = {formOnSubmit}\n          classNameStyle = \"todo-form\"\n          placeholder = \"What do you intend TO DO?\"\n          btnName = \"Add Intent\"\n        />\n        <TodoList \n          todos = {todos} \n          updateTodos = {setTodos}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}